name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: AI Code Review
        uses: actions/github-script@v7
        with:
          script: |
            const OPENROUTER_API_KEY = '${{ secrets.OPENROUTER_API_KEY }}';

            const diff = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.pull_request.base.sha,
              head: context.payload.pull_request.head.sha
            });

            // 리뷰할 파일 필터링
            const filesToReview = diff.data.files.filter(file =>
              file.patch && 
              !file.filename.includes('node_modules/') &&
              !file.filename.includes('.expo/') &&
              !file.filename.includes('dist/') &&
              !file.filename.endsWith('.lock') &&
              !file.filename.endsWith('.log')
            );

            if (filesToReview.length === 0) {
              console.log('No files to review');
              return;
            }

            // 파일 분류 (실제 프로젝트 구조에 맞게 수정)
            const tsxFiles = filesToReview.filter(f => f.filename.endsWith('.tsx'));
            const tsFiles = filesToReview.filter(f => f.filename.endsWith('.ts'));
            const appFiles = filesToReview.filter(f => f.filename.includes('app/'));
            const componentFiles = filesToReview.filter(f => f.filename.includes('components/'));
            const hookFiles = filesToReview.filter(f => f.filename.includes('hooks/'));
            const serviceFiles = filesToReview.filter(f => f.filename.includes('services/'));
            const storeFiles = filesToReview.filter(f => f.filename.includes('store/'));

            // 전체 변경사항 수집
            let allChanges = '';
            const filesSummary = [];
            
            for (const file of filesToReview) {
              // 실제 파일의 전체 라인 수를 가져오기 위해 파일 내용 조회
              let totalLines = 0;
              try {
                const fileContent = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: file.filename,
                  ref: context.payload.pull_request.head.sha
                });
                
                if (fileContent.data.content) {
                  const content = Buffer.from(fileContent.data.content, 'base64').toString('utf-8');
                  totalLines = content.split('\n').length;
                }
              } catch (e) {
                totalLines = file.additions; // 새 파일의 경우
              }
              
              filesSummary.push(`- ${file.filename} (+${file.additions}/-${file.deletions}) [총 ${totalLines}줄]`);
              allChanges += `\n### ${file.filename}\n`;
              allChanges += `\`\`\`diff\n${file.patch}\n\`\`\`\n`;
            }

            // AI 리뷰 요청
            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                model: 'openrouter/sonoma-sky-alpha',
                messages: [{
                  role: 'system',
                  content: `React Native 프론트엔드 코드 리뷰어입니다.

                  ## 🔴 절대 규칙 체크리스트
                  
                  ### 1. Component Architecture
                  - [ ] 컴포넌트가 300줄을 초과하는가? → 분리 검토 (복잡한 상태 관리는 예외)
                  - [ ] 리스트 아이템에 React.memo()가 적용되었는가?
                  - [ ] StyleSheet.create()를 사용하는가? (style={{}} 직접 객체 리터럴만 금지)
                  - [ ] Props 인터페이스가 명확히 정의되었는가?
                  - [ ] 주의: style={[styles.base, { dynamic: value }]} 패턴은 React Native에서 정상! SafeAreaInsets 등 동적 값은 병합 필요
                  
                  ### 2. TypeScript Rules  
                  - [ ] 'any' 타입을 사용한 곳이 있는가? → 절대 금지
                  - [ ] null/undefined 체크가 되어있는가?
                  - [ ] import type을 사용하여 타입을 import했는가?
                  - [ ] @/ 절대 경로를 사용하는가?
                  - [ ] catch (_error) 대신 catch (error: unknown)을 사용하는가? → _error 금지
                  
                  ### 3. State Management
                  - [ ] 3단계 이상 prop drilling이 있는가? → Zustand 사용 (2단계는 정상)
                  - [ ] 서버 데이터는 React Query를 사용하는가?
                  - [ ] 전역 상태는 Zustand를 사용하는가?
                  
                  ### 4. React Native Specific
                  - [ ] 긴 목록에 FlatList를 사용하는가? (ScrollView 금지)
                  - [ ] 키보드 입력시 KeyboardAvoidingView를 사용하는가?
                  - [ ] Platform.OS로 플랫폼 분기를 처리하는가?
                  - [ ] SafeAreaView 또는 useSafeAreaInsets로 노치 처리하는가? (둘 중 하나만 사용)
                  
                  ### 5. Performance
                  - [ ] 이벤트 핸들러에 useCallback을 사용하는가?
                  - [ ] 복잡한 계산에 useMemo를 사용하는가?
                  - [ ] 리스트 아이템 컴포넌트에 React.memo를 사용하는가?
                  
                  ### 6. API Communication
                  - [ ] services/ 폴더의 API 함수를 사용하는가?
                  - [ ] 에러 처리가 되어있는가?
                  - [ ] 로딩 상태를 처리하는가?
                  
                  각 파일별로 위 체크리스트 기준으로 리뷰하고,
                  🔴 반드시 수정 필요한 사항 (실제 버그나 성능 문제)
                  🟡 개선 권장 사항 (더 나은 패턴 제안)
                  🟢 잘 작성된 부분
                  으로 구분해서 리뷰해주세요.
                  
                  중요: React Native의 정상적인 패턴을 문제로 지적하지 마세요:
                  - style={[styles.base, { dynamic }]}는 정상
                  - useSafeAreaInsets와 SafeAreaView는 동일 기능 (중복 사용 불필요)
                  - 2단계 prop drilling은 정상 (3단계부터 문제)`
                }, {
                  role: 'user',
                  content: `다음 ${filesToReview.length}개 파일을 리뷰해주세요:
                  
                  파일 목록:
                  ${filesSummary.join('\n')}
                  
                  분류:
                  - App (라우팅): ${appFiles.length}개
                  - 컴포넌트: ${componentFiles.length}개
                  - Hooks: ${hookFiles.length}개  
                  - Services: ${serviceFiles.length}개
                  - Store (상태관리): ${storeFiles.length}개
                  - TypeScript: ${tsFiles.length}개
                  - TSX: ${tsxFiles.length}개
                  
                  변경사항:
                  ${allChanges}
                  
                  절대 규칙 위반사항을 중점적으로 체크해주세요.`
                }],
                max_tokens: 10000,
                temperature: 0.3
              })
            });

            let reviewBody = `# 🤖 AI 코드 리뷰\n\n`;
            reviewBody += `## 📊 변경 통계\n`;
            reviewBody += `- **총 파일**: ${filesToReview.length}개\n`;
            reviewBody += `- **추가된 라인**: +${diff.data.files.reduce((sum, f) => sum + f.additions, 0)}\n`;
            reviewBody += `- **삭제된 라인**: -${diff.data.files.reduce((sum, f) => sum + f.deletions, 0)}\n`;
            reviewBody += `- **App**: ${appFiles.length}개 | **컴포넌트**: ${componentFiles.length}개 | **Hooks**: ${hookFiles.length}개 | **Services**: ${serviceFiles.length}개 | **Store**: ${storeFiles.length}개\n\n`;

            if (response.ok) {
              const result = await response.json();
              reviewBody += result.choices[0].message.content;
            } else {
              reviewBody += `⚠️ 리뷰 실패: ${response.status}`;
            }
            
            // 자동 체크 추가
            reviewBody += `\n\n## ✅ 자동 체크리스트\n`;
            reviewBody += `- [ ] \`npm run lint\` 실행했는가?\n`;
            reviewBody += `- [ ] \`npx tsc --noEmit\` 타입 체크 통과하는가?\n`;
            reviewBody += `- [ ] 300줄 넘는 컴포넌트가 없는가?\n`;
            reviewBody += `- [ ] 모든 리스트 아이템에 React.memo 적용했는가?\n`;
            reviewBody += `- [ ] any 타입 사용한 곳이 없는가?\n`;

            // PR 리뷰 제출
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: reviewBody,
              event: 'COMMENT'
            });

            console.log('✅ Review completed!');